<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Configure Default Values (Edit)

// Appearance
font = fnt_default;
color = c_white;
halign = fa_center;
valign = fa_middle;
scale = 1;

// Shadow
drawShadow = false;
shadowXDisplacement = 4;
shadowYDisplacement = 4;

// Redrawing
redrawTimer = 60; // 0 = auto-redraw disabled
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init

// The surface to draw the text to
mySurface = noone;

// Handles strings
myText = "";
newText = "";

// Tells us when we need to redraw the surface
redrawText = true;

// Handles hor and vert alignment
posx = 0;
posy = 0;

// Auto-redraw
if (redrawTimer &gt; 0){
    alarm[0] = redrawTimer;
}

// Get my text
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Auto-redraw

alarm[0] = redrawTimer;

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If my text has changed, or other reason

if (myText != newText || redrawEveryStep){
    myText = newText;
    redrawText = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw text to surface

// If we need to redraw the surface
if (redrawText or ! surface_exists(mySurface)){

    redrawText = false;
       
    draw_set_font(font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    
    // Get width and height of the text
    var textW = max(1, string_width(myText)*scale+(drawShadow*4));
    var textH = max(1, string_height(myText)*scale+(drawShadow*4));
    
    if ( ! surface_exists(mySurface)){
        // Create the surface
        mySurface = surface_create(textW, textH); 
    }

    // Get center point
    var w2 = round(textW/2);
    var h2 = round(textH/2);
    
    // Resize the surface just in case our string changed dimensions
    surface_resize(mySurface, textW, textH);
    
    // Draw on surface from now on
    surface_set_target(mySurface);
    
    // Clear surface
    draw_clear_alpha(c_white, 0);
    
    // If we draw a shadow
    if (drawShadow){
        draw_set_color(c_black);
        draw_set_alpha(0.8);
        draw_text_transformed(w2+shadowXDisplacement, h2+shadowYDisplacement, myText, scale, scale, 0);
        draw_set_alpha(1);
    }
    
    // Draw text on my surface
    draw_text_transformed(w2, h2, myText, scale, scale, 0);
    
    // Reset
    surface_reset_target();
    
    // Depending on halign and valign, draw at different posiitons on the surface
    switch(halign){
        case fa_left:   posx = 0;      break;
        case fa_center: posx = -w2;    break;
        case fa_right:  posx = -textW; break;
        default: posx = 0;
    }
    switch(valign){
        case fa_top:    posy = 0;      break;
        case fa_middle: posy = -h2;    break;
        case fa_bottom: posy = -textH; break;
        default: posy = 0;
    }
}

// Draw the surface
draw_surface_ext(mySurface, x+posx, y+posy, 1, 1, 0, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
